/*
 * Tone.h
 *
 * Created: 2018/12/1 22:15:18
 *  Author: naitsuku
 */ 


#ifndef TONE_H_
#define TONE_H_

#include "YWinthCommon.h"



/* オペレータデータ保存用の構造体 */
struct opdata_t {
	uint8_t ar; /* アタックレート(0-15) */
	uint8_t dr; /* ディケイレート(0-15) */
	uint8_t sr; /* サスティンレート(0-15) */
	uint8_t sl; /* サスティンレベル(0-15) */
	uint8_t rr; /* リリースレート(0-15) */
	uint8_t mul;/* 周波数倍率(0-15) */
	uint8_t det;/* デチューン(0-7) */
	uint8_t tl; /* トータルレベル(0-63) */
	uint8_t ksl;/* KS有効(0/1) */
	uint8_t ksr;/* KS深さ(0-3)*/
	uint8_t ws; /* 波形選択(0-31) */
	uint8_t dvb;/* ビブラート深さ(0-3) */
	uint8_t evb;/* ビブラート有効(0/1) */
	uint8_t dam; /* AM変調深さ(0-3)*/
	uint8_t eam; /* AM変調有効(0/1) */
	uint8_t fb;  /* フィードバック深さ(0-7) */
	uint8_t xof; /* キーオフ無視(0/1) */
};

/* トーンデータ保存用の構造体 */
struct tonedata_t {
	/* 全オペレータ共通パラメータ */
	uint8_t arg; /* アルゴリズム    (0-7) */
	uint8_t lfo; /* LFO(低周波変調) (0-3) */
	uint8_t bo;  /* ベースオクターブ (0-3) */
	
	/* 個別オペレータパラメータ */
	opdata_t op[4]; /* opertorってたぶんC++の予約語やで！ */
	
};

extern tonedata_t Tone;

const uint8_t TONE_TBL[][35] PROGMEM = {
	/* default tone(sine wave) */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x85,
	/*  SR   RRDR ARSL TLKS AMVB MUDT WSFB	*/
		0x00,0x7F,0xF4,0xBB,0x00,0x10,0x40, /* opr1 */
		0x00,0xAF,0xA0,0x0E,0x03,0x10,0x40, /* opr2 */
		0x00,0x2F,0xF3,0x9B,0x00,0x20,0x41, /* opr3 */
		0x00,0xAF,0xA0,0x0E,0x01,0x10,0x40, /* opr4 */
		0x80,0x03,0x81,0x80,
	},
	
	/* Brass1 tone */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x85,
	/*  SR   RRDR ARSL TLKS AMVB MUDT WSFB	*/
		0x00,0x74,0x7A,0x55,0x00,0x20,0x00,
		0x00,0x8D,0xA0,0x0E,0x03,0x10,0x00,
		0x00,0x74,0x7A,0x42,0x00,0x10,0x00,
		0x00,0x8C,0xA0,0x0E,0x01,0x10,0x10,
		0x80,0x03,0x81,0x80
	},
	/* Brass2 tone */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x85,
	/*  SR   RRDR ARSL TLKS AMVB MUDT WSFB	*/
		0x00,0x74,0x7B,0x56,0x00,0x10,0x00,
		0x00,0x8D,0xA0,0x02,0x03,0x00,0x08,
		0x00,0x74,0x7B,0x42,0x00,0x10,0x00,
		0x00,0x8C,0xA0,0x02,0x01,0x10,0x08,
		0x80,0x03,0x81,0x80
	},
	
	/* Square Wave */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x85,
	/*  SR   RRDR ARSL TLKS AMVB MUDT WSFB	*/
		0x00,0x7F,0xF4,0xBB,0x00,0x10,0x30,
		0x00,0xAF,0xA0,0x0E,0x03,0x10,0x30,
		0x00,0x2F,0xF3,0x9B,0x00,0x20,0x31,
		0x00,0xAF,0xA0,0x0E,0x01,0x10,0x30,
		0x80,0x03,0x81,0x80,
	},
	
	/* SawTooth Wave */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x85,
	/*  SR   RRDR ARSL TLKS AMVB MUDT WSFB	*/
		0x00,0x7F,0xF4,0xBB,0x00,0x10,0xC0,
		0x00,0xAF,0xA0,0x0E,0x03,0x10,0xC0,
		0x00,0x2F,0xF3,0x9B,0x00,0x20,0xC1,
		0x00,0xAF,0xA0,0x0E,0x01,0x10,0xC0,
		0x80,0x03,0x81,0x80,
	},
	
	#if 0
	{
		/* 0 */ 0x81,//headerHeader:1byte(80H+MaximumToneNumber)
		//T_ADR0
		//EntireToneSetting
		/* 1 */ 0x01,//BO(BasicOctave)
		/* 2 */ 0x43,//LFO,ALG
		//Operator1Setting
		/* 3 */ 0x00,//SR,XOF,KSR
		0xE7,//RR,DR
		0xFF,//AR,SL
		0x9D,//TL,KSL
		0x00,//DAM(amplitudemodulationdepth),EAM(enableamplitudemodulation),DVB(vibratodepth),EVB(enablevibrato)
		0x10,//MULTI(magnificationoffrequency),DT(detune)
		0x40,//WS(waveshape),FB(FMfeedbacklevel)
		//Operator2Setting
		0x20,//SR,XOF,KSR
		0x33,//RR,DR
		0xE2,//AR,SL
		0x73,//TL,KSL
		0x00,//DAM(amplitudemodulationdepth),EAM(enableamplitudemodulation),DVB(vibratodepth),EVB(enablevibrato)
		0x50,//MULTI(magnificationoffrequency),DT(detune)
		0x40,//WS(waveshape),FB(FMfeedbacklevel)
		//Operator3Setting
		0x10,//SR,XOF,KSR
		0x41,//RR,DR
		0xD3,//AR,SL
		0x5B,//TL,KSL
		0x00,//DAM(amplitudemodulationdepth),EAM(enableamplitudemodulation),DVB(vibratodepth),EVB(enablevibrato)
		0x10,//MULTI(magnificationoffrequency),DT(detune)
		0x41,//WS(waveshape),FB(FMfeedbacklevel)
		//Operator4Setting
		0x20,//SR,XOF,KSR
		0x63,//RR,DR
		0xD4,//AR,SL
		0x02,//TL,KSL
		0x01,//DAM(amplitudemodulationdepth),EAM(enableamplitudemodulation),DVB(vibratodepth),EVB(enablevibrato)
		0x10,//MULTI(magnificationoffrequency),DT(detune)
		0x40,//WS(waveshape),FB(FMfeedbacklevel)
		0x80,0x03,0x81,0x80,//End(80H,03H,81H,80H)
	},
	#endif
	
	/* EPiano */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x45,      // modify BO:0 -> BO:1
		0x51,0xC4,0xFB,0x8C,0x44,0x70,0x95,
		0x10,0x82,0xFF,0x12,0x45,0x10,0x00,
		0x11,0xB0,0xF1,0x49,0x44,0x10,0x02,
		0x11,0x72,0xFF,0x10,0x41,0x10,0x00
	},
	
	/* TenorSax */
	{
		0x81,//header
		//T_ADR 0
		0x01,0x45,      // modify BO:0 -> BO:1
		0x01,0x03,0x70,0x16,0x44,0x10,0x0B,
		0x00,0x92,0x70,0x3C,0x43,0x10,0x40,
		0x01,0x03,0x70,0x22,0x44,0x10,0x4B,
		
	}
};



void setPrisetTone(uint8_t tone_num);

void toneRegRead(uint8_t * tone_data);
void toneRegWrite(uint8_t * tone_data);

void toneWrite(tonedata_t * tone);
void toneRead(uint8_t * tone_data, tonedata_t * tone);

void toneDump(tonedata_t * tone);

#endif /* TONE_H_ */